# -*- coding: utf-8 -*-
"""Iris dataset using ML.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AiMt_dUjg5UHLqPo4YltVzy4u70izXbT

The aim is to classify iris flower among three species (setosa, versicolor , virginica ) from the measurement of sepals and petals length & width.

This iris dataset consist of 3 classes of 50 instances each.

The goal is to design a model that make useful classification for new flower
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing all Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""Loading the dataset"""

column = ['sepal_length','sepal_width','petal_length','petal_width','species']
#Load the data
df = pd.read_csv('IRIS.csv',names=column)
#top head part of data
df.head()

"""Visualization of dataset"""

df.describe()

"""Visulize the whole dataset"""

sns.pairplot(df,hue='species')

"""Seperating input and output column"""

# Seperate feature and target

data=df.values

X=data[:,0:4]
Y=data[:,4]
print(Y)

"""Splitting the data into training and testing"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)
print(X_test)

"""Model 1 : Support vector machine algorithm"""

from sklearn.svm import SVC
model_svc=SVC()
model_svc.fit(X_train,Y_train)

prediction1=model_svc.predict(X_test)
#Calculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,prediction1)*100)
for i in range(len(prediction1)):
  print(Y_test[i],prediction1[i])

"""Model 2: Logistic Regression"""

from sklearn.linear_model import LogisticRegression
model_lr=LogisticRegression()
model_lr.fit(X_train,Y_train)

prediction2=model_lr.predict(X_test)
#Calculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,prediction2)*100)
for i in range(len(prediction2)):
  print(Y_test[i],prediction2[i])

"""Module 3:  Decision tree classifier"""

from sklearn.tree import DecisionTreeClassifier
model_dt=DecisionTreeClassifier()
model_dt.fit(X_train,Y_train)

prediction3 = model_dt.predict(X_test)
#Calculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,prediction3)*100)

from sklearn.metrics import classification_report,confusion_matrix
print(classification_report(Y_test,prediction3))
print(confusion_matrix(Y_test,prediction3))

X_new=np.array([[3,2,1,0.2],[4.9,2.2,3.8,1.1],[5.3,2.5,4.6,1.9]])
prediction = model_dt.predict(X_new)
print("Prediction of Species: {}".format(prediction))
